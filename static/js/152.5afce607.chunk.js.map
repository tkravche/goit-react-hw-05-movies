{"version":3,"file":"static/js/152.5afce607.chunk.js","mappings":"8OAEaA,E,OAAkBC,GAAAA,IAAH,0F,SCEfC,EAAmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjC,OACE,UAACH,EAAD,YACE,gBACEI,IAAG,yCAAoCD,EAAME,aAC7CC,IAAKH,EAAMI,MACXC,MAAM,MACNC,OAAO,SAET,4BACE,0BACGN,EAAMI,MADT,KACkBJ,EAAMO,aAAaC,MAAM,EAAG,GAD9C,QAGA,wCAAwD,GAAxCC,OAAOT,EAAMU,aAAaC,QAAQ,IAAlD,SACA,uCACA,uBAAIX,EAAMY,YACV,mCACCZ,EAAMa,OAAOC,KAAI,SAAAC,GAAK,OACrB,gCAAuBA,EAAMC,KAA7B,MAAWD,EAAME,GADI,SAM9B,EC4BD,EA5CqB,WACnB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOlB,EAAP,KAAcmB,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAcE,GAAd,WACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeL,GACZM,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,EAASS,EAAvB,IACLC,OAAM,SAAAC,GAAK,OAAIV,EAASU,EAAMC,QAAnB,GACf,GAAE,CAACV,IACJ,IAAMW,GAAWC,EAAAA,EAAAA,MACjB,OAAQjC,GAGN,6BACE,gCACE,mBACEkC,KAAK,SACLC,QAAS,WAAO,IAAD,IACbH,EAAQ,iBAACT,QAAD,IAACA,GAAD,UAACA,EAAUa,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IACnC,EAJH,4BAUA,SAACtC,EAAD,CAAkBC,MAAOA,QAG3B,gCACE,oDACA,UAAC,KAAD,CAAMsC,GAAG,OAAOF,MAAOb,EAASa,MAAhC,WACE,iCAAc,QAEhB,UAAC,KAAD,CAAME,GAAG,UAAUF,MAAOb,EAASa,MAAnC,WACE,oCAAiB,QAEnB,SAAC,KAAD,UAzBJ,EA6BH,C,oKCnDDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAsB,WACjC,OAAOF,EAAAA,EAAAA,GAAM,uBAAwB,CACnCG,OAAQ,CACNC,QAASH,IAId,EAEYd,EAAiB,SAAAT,GAC5B,OAAOsB,EAAAA,EAAAA,GAAM,sCAAD,OAAuCtB,EAAvC,oBAAqDuB,GAClE,EAEYI,EAAiB,SAAA3B,GAC5B,OAAOsB,EAAAA,EAAAA,GAAM,sCAAD,OAC4BtB,EAD5B,4BACkDuB,GAE/D,EAEYK,EAAoB,SAAA5B,GAC/B,OAAOsB,EAAAA,EAAAA,GAAM,sCAAD,OAC4BtB,EAD5B,4BACkDuB,GAE/D,EAEYM,EAAoB,SAAAC,GAC/B,OAAOR,EAAAA,EAAAA,GAAM,mDAAD,OACyCQ,EADzC,oBAC2DP,EAD3D,WAGb,C","sources":["components/MovieDetailsItem/MoviesDetailsItem.styled.jsx","components/MovieDetailsItem/MovieDetailsItem.jsx","pages/MovieDetailsPage.jsx","services/moviesAPI.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  display: flex;\n  gap: 30px;\n  border-bottom: 1px solid grey;\n`;\n","import PropTypes from 'prop-types';\n\nimport { StyledContainer } from './MoviesDetailsItem.styled';\n\nexport const MovieDetailsItem = ({ movie }) => {\n  return (\n    <StyledContainer>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n        alt={movie.title}\n        width=\"240\"\n        height=\"340\"\n      />\n      <div>\n        <h2>\n          {movie.title} ({movie.release_date.slice(0, 4)})\n        </h2>\n        <p>User Score: {Number(movie.vote_average.toFixed(1)) * 10}% </p>\n        <h3>Overview </h3>\n        <p>{movie.overview}</p>\n        <h3>Genres</h3>\n        {movie.genres.map(genre => (\n          <span key={genre.id}> {genre.name} </span>\n        ))}\n      </div>\n    </StyledContainer>\n  );\n};\n\nMovieDetailsItem.propTypes = {\n  moviesSearch: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.array.isRequired,\n    })\n  ),\n};\n","import {\n  Link,\n  Outlet,\n  useNavigate,\n  useParams,\n  useLocation,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'services/moviesAPI';\nimport { MovieDetailsItem } from '../components/MovieDetailsItem/MovieDetailsItem';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchMovieById(movieId)\n      .then(({ data }) => setMovie(data))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n  const navigate = useNavigate();\n  return !movie ? (\n    ''\n  ) : (\n    <main>\n      <section>\n        <button\n          type=\"button\"\n          onClick={() => {\n            navigate(location?.state?.from ?? '/');\n          }}\n        >\n          &#8592;Go back\n        </button>\n\n        {/* <button onClick={() => navigate(-1)}> &#8592;Go back</button> */}\n        <MovieDetailsItem movie={movie} />\n      </section>\n\n      <section>\n        <p>Additional information </p>\n        <Link to=\"cast\" state={location.state}>\n          <h4>Cast</h4>{' '}\n        </Link>\n        <Link to=\"reviews\" state={location.state}>\n          <h4>Reviews</h4>{' '}\n        </Link>\n        <Outlet />\n      </section>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '612624e4ceb53e70d9f6450958bf781b';\n// const PER_PAGE = 12;\n\nexport const fetchTrendingMovies = () => {\n  return axios('/trending/movie/day?', {\n    params: {\n      api_key: API_KEY,\n      // per_page: PER_PAGE,\n    },\n  });\n};\n\nexport const fetchMovieById = id => {\n  return axios(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieCast = id => {\n  return axios(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n};\n\nexport const fetchMovieReviews = id => {\n  return axios(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n};\n\nexport const fetchMovieByQuery = search => {\n  return axios(\n    `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}&page=1`\n  );\n};\n// https://api.themoviedb.org/3/trending/movie/day?api_key=612624e4ceb53e70d9f6450958bf781b\n//https://api.themoviedb.org/3/movie/868759?api_key=612624e4ceb53e70d9f6450958bf781b\n//https://api.themoviedb.org/3/movie/868759/credits?api_key=612624e4ceb53e70d9f6450958bf781b\n//https://api.themoviedb.org/3/movie/868759/reviews?api_key=612624e4ceb53e70d9f6450958bf781b\n//https://api.themoviedb.org/3/search/movie?query=batman&api_key=612624e4ceb53e70d9f6450958bf781b&page=1\n"],"names":["StyledContainer","styled","MovieDetailsItem","movie","src","poster_path","alt","title","width","height","release_date","slice","Number","vote_average","toFixed","overview","genres","map","genre","name","id","useState","setMovie","setError","movieId","useParams","location","useLocation","useEffect","fetchMovieById","then","data","catch","error","message","navigate","useNavigate","type","onClick","state","from","to","axios","API_KEY","fetchTrendingMovies","params","api_key","fetchMovieCast","fetchMovieReviews","fetchMovieByQuery","search"],"sourceRoot":""}